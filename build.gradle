buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "net.saliman:gradle-cobertura-plugin:1.0.1"
    }
}

apply plugin : 'java'
apply plugin : 'eclipse'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'cobertura'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.ninja-squad'
sourceCompatibility = 1.6

repositories {
    mavenCentral()
}

build.dependsOn project.tasks.getByName("cobertura")

dependencies {
    compile 'com.google.code.findbugs:jsr305:2.0.0'
    compile 'net.sourceforge.findbugs:annotations:1.3.2'
    testCompile 'junit:junit:4.+'
    testCompile 'org.mockito:mockito-all:1.9.0'
    testCompile 'org.hsqldb:hsqldb:2.2.8'
}

configurations {
    compile.transitive = false
    testCompile.transitive = false
    runtime.transitive = false
    testRuntime.transitive = false
}

[compileJava, compileTestJava]*.options*.encoding = 'ISO-8859-1'

checkstyle {
    sourceSets = [sourceSets.main]
}

checkstyleMain << {
    ant.xslt(in: reports.xml.destination,
             style: new File(configFile.parent, 'checkstyle-noframes-sorted.xsl'),
             out: new File(reports.xml.destination.parent, 'main.html'))
}

pmd {
    sourceSets = [sourceSets.main]
}

pmdMain {
    ignoreFailures = true
    ruleSetFiles = files('config/pmd/ruleSet.xml')
}

findbugs {
    sourceSets = [sourceSets.main]
    ignoreFailures = true
}

findbugsMain {
    reports {
        xml {
            enabled = false
        }
        html {
            enabled = true
        }
    }
}

def sharedManifest = manifest {
    attributes(['Implementation-Title': project.name, 
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'ninja-squad.com'])
}

jar {
    manifest { 
        from sharedManifest
    }
}

javadoc {
    options.overview file('src/main/resources/com/ninja_squad/dbsetup/overview.html').path
    options.noTimestamp true
    options.linkSource true
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest { 
        from sharedManifest
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    manifest { 
        from sharedManifest
    }
}

task distributionZip(type: Zip, dependsOn: [javadoc, jar]) {
    classifier = 'dist'
    def rootDir = project.name + '-' + project.version;
    into(rootDir) {
        from jar.archivePath
    }
    into(rootDir + '/src') {
        from sourceSets.main.java
    }
    into(rootDir + '/javadoc') {
        from javadoc.destinationDir
    }
}

assemble {
    dependsOn distributionZip
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

eclipseJdt << {
    File f = file('.settings/org.eclipse.core.resources.prefs')
    f.write('eclipse.preferences.version=1\n')
    f.append('encoding/<project>=ISO-8859-1')
}

cleanEclipseJdt << {
    File f = file('.settings/org.eclipse.core.resources.prefs')
    f.delete()
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            // TODO configure maven repos:
            repository(url: 'file://d:/temp/repoRelease')
            snapshotRepository(url: 'file://d:/temp/repoSnapshot')
        }
    }
}

[install.repositories.mavenInstaller, uploadArchives.repositories.mavenDeployer]*.pom*.whenConfigured {pom ->
    // we don't care about test dependencies
    pom.dependencies = pom.dependencies.findAll {it.scope != 'test'} 
    // we don't care about findbugs annotations 
    pom.dependencies = pom.dependencies.findAll {it.groupId != 'net.sourceforge.findbugs' && it.artifactId != 'annotations'} 
    // we don't care about JSR305 annotations
    pom.dependencies = pom.dependencies.findAll {it.groupId != 'com.google.code.findbugs' && it.artifactId != 'jsr305'} 
    // all dependencies are compile time dependencies, and there is no need to say it
    pom.dependencies*.scope = null 
    
    pom.project {
        description = 'Helps you setup your database with test data'
        url = 'https://github.com/Ninja-Squad/DbSetup'
        organization {
            name = 'Ninja Squad'
            url = 'http://ninja-squad.github.com/DbSetup'
        }
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        scm {
            url = 'https://github.com/Ninja-Squad/DbSetup'
            connection = 'scm:git:git://github.com/Ninja-Squad/DbSetup'
            developerConnection = 'scm:git:git://github.com/Ninja-Squad/DbSetup'
        }
        developers {
            developer {
                id = 'jnizet'
                name = 'Jean-Baptiste Nizet'
                email = 'jb@ninja-squad.com'
            }
        }
    }
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.1'
}