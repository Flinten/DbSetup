allprojects {
    group = 'com.ninja-squad'
}

subprojects { subProject ->
    apply plugin : 'java'
    apply plugin : 'maven'
    apply plugin : 'signing'
    apply plugin : 'osgi'
    apply plugin : 'checkstyle'

    version = rootProject.version
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    task checkJavaVersion << {
        if (!JavaVersion.current().isJava8()) {
            String message = "ERROR: Java 1.8 required but " +
                             JavaVersion.current() +
                             " found. Change your JAVA_HOME environment variable.";
            throw new IllegalStateException(message);
        }
    }
    compileJava.dependsOn checkJavaVersion

    subProject.ext.sharedManifest = manifest {
        attributes(['Implementation-Title': project.name,
                    'Implementation-Version': project.version,
                    'Implementation-Vendor': 'ninja-squad.com'])
    }

    subProject.jar {
        manifest {
            from subProject.ext.sharedManifest
            instruction 'Bundle-Vendor', 'ninja-squad.com'
        }
    }

    subProject.test {
        testLogging {
            exceptionFormat = 'full'
        }
    }

    checkstyle {
        sourceSets = [sourceSets.main]
        configProperties = [
            'headerFile': rootProject.file('config/checkstyle/java.header')
        ]
    }

    subProject.checkstyleMain << {
        ant.xslt(in: reports.xml.destination,
                 style: rootProject.file('config/checkstyle/checkstyle-noframes-sorted.xsl'),
                 out: new File(reports.xml.destination.parent, 'main.html'))
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
        manifest {
            from sharedManifest
        }
    }

    artifacts {
        archives sourcesJar
    }

    task checkSonatypeProperties << {
        if (project.properties['sonatypeUsername'] == null || project.properties['sonatypePassword'] == null) {
            throw new IllegalStateException("ERROR: you need to have sonatypeUsername and sonatypePassword properties" +
                                            " defined in your HOME/.gradle/gradle.properties file to upload archives");
        }
    }

    subProject.uploadArchives {
        dependsOn checkSonatypeProperties
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                    authentication(userName: project.properties['sonatypeUsername'], password: project.properties['sonatypePassword'])
                }
                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                    authentication(userName: project.properties['sonatypeUsername'], password: project.properties['sonatypePassword'])
                }
            }
        }
    }

    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
    subProject.signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    [install.repositories.mavenInstaller, uploadArchives.repositories.mavenDeployer]*.pom*.whenConfigured { pom ->
        subProject.configurePomDependencies(pom)

        pom.project {
            name = subProject.name
            description = subProject.description
            url = 'http://dbsetup.ninja-squad.com/'
            organization {
                name = 'Ninja Squad'
                url = 'http://ninja-squad.com'
            }
            licenses {
                license {
                    name 'MIT License'
                    url 'http://dbsetup.ninja-squad.com/license.html'
                    distribution 'repo'
                }
            }
            scm {
                url = 'https://github.com/Ninja-Squad/DbSetup'
                connection = 'scm:git:git://github.com/Ninja-Squad/DbSetup'
                developerConnection = 'scm:git:git://github.com/Ninja-Squad/DbSetup'
            }
            developers {
                developer {
                    id = 'jnizet'
                    name = 'Jean-Baptiste Nizet'
                    email = 'jb@ninja-squad.com'
                }
            }
        }
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}
